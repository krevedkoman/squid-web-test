Понял вашу задачу. Мы создадим веб-приложение на PHP для управления пользователями прокси-сервера Squid. Приложение должно позволять добавлять, удалять и изменять пароли пользователей, а также устанавливать и менять пароль администратора.

Конфигурация
Параметр	Описание
ADMIN_PASSWORD_FILE	Файл для хранения пароля администратора (например, /etc/squid/admin_password)
SQUID_USERS_FILE	Файл с пользователями Squid (/etc/squid/passwd)
HTPASSWD_CMD	Путь к команде htpasswd (обычно /usr/bin/htpasswd)
Дизайн
Установка пароля администратора
Форма для установки пароля администратора перед первым запуском
Вход в систему
Форма входа с проверкой пароля администратора
Добавление пользователя
Форма для добавления нового пользователя и пароля
Удаление пользователя
Список пользователей с возможностью удаления
Изменение пароля пользователя
Возможность изменения пароля существующего пользователя
Смена пароля администратора
Форма для смены пароля администратора
Структура проекта
/squid_admin/
│
├── index.php                 # Главная страница и вход в систему
├── admin_login.php           # Обработка формы входа администратора
├── set_admin_password.php    # Установка пароля администратора
├── add_user.php              # Добавление нового пользователя
├── delete_user.php           # Удаление пользователя
├── change_user_password.php  # Изменение пароля пользователя
├── change_admin_password.php # Смена пароля администратора
└── functions.php             # Вспомогательные функции и константы
Начало кодирования
Файл functions.php
Этот файл будет содержать все вспомогательные функции и константы, которые используются в других файлах.

<?php
// functions.php

define('ADMIN_PASSWORD_FILE', '/etc/squid/admin_password');
define('SQUID_USERS_FILE', '/etc/squid/passwd');
define('HTPASSWD_CMD', '/usr/bin/htpasswd');

function isAdminPasswordSet() {
    return file_exists(ADMIN_PASSWORD_FILE);
}

function checkAdminPassword($password) {
    $storedHash = trim(file_get_contents(ADMIN_PASSWORD_FILE));
    return password_verify($password, $storedHash);
}

function setAdminPassword($password) {
    $hash = password_hash($password, PASSWORD_DEFAULT);
    file_put_contents(ADMIN_PASSWORD_FILE, $hash);
}

function addUser($username, $password) {
    exec(HTPASSWD_CMD . " -b " . SQUID_USERS_FILE . " " . escapeshellarg($username) . " " . escapeshellarg($password));
}

function deleteUser($username) {
    exec(HTPASSWD_CMD . " -D " . SQUID_USERS_FILE . " " . escapeshellarg($username));
}

function getAllUsers() {
    $users = [];
    if (file_exists(SQUID_USERS_FILE)) {
        $lines = file(SQUID_USERS_FILE, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        foreach ($lines as $line) {
            list($user, ) = explode(':', $line, 2);
            $users[] = $user;
        }
    }
    return $users;
}

function changeUserPassword($username, $newPassword) {
    exec(HTPASSWD_CMD . " -b " . SQUID_USERS_FILE . " " . escapeshellarg($username) . " " . escapeshellarg($newPassword));
}
?>
Файл index.php
Этот файл будет отображать главную страницу и форму входа администратора.

<?php
// index.php

session_start();

require 'functions.php';

if (!isAdminPasswordSet()) {
    header("Location: set_admin_password.php");
    exit;
}

if (isset($_POST['login'])) {
    $password = $_POST['password'];
    if (checkAdminPassword($password)) {
        $_SESSION['admin_logged_in'] = true;
        header("Location: admin_dashboard.php");
        exit;
    } else {
        $error = "Неправильный пароль!";
    }
}
?>

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Вход в систему</title>
</head>
<body>
    <h2>Вход в систему администратора</h2>
    <?php if (isset($error)): ?>
        <p style="color: red;"><?php echo $error; ?></p>
    <?php endif; ?>
    <form method="post">
        Пароль: <input type="password" name="password"><br><br>
        <button type="submit" name="login">Войти</button>
    </form>
</body>
</html>
Файл set_admin_password.php
Этот файл будет отображать форму для установки пароля администратора.

<?php
// set_admin_password.php

session_start();

require 'functions.php';

if (isAdminPasswordSet()) {
    header("Location: index.php");
    exit;
}

if (isset($_POST['set_password'])) {
    $password = $_POST['password'];
    if (!empty($password)) {
        setAdminPassword($password);
        header("Location: index.php");
        exit;
    } else {
        $error = "Пароль не может быть пустым!";
    }
}
?>

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Установка пароля администратора</title>
</head>
<body>
    <h2>Установите пароль для администратора</h2>
    <?php if (isset($error)): ?>
        <p style="color: red;"><?php echo $error; ?></p>
    <?php endif; ?>
    <form method="post">
        Пароль: <input type="password" name="password"><br><br>
        <button type="submit" name="set_password">Установить пароль</button>
    </form>
</body>
</html>
Файл admin_dashboard.php
Этот файл будет отображать панель администратора с возможностью добавления, удаления и изменения пользователей, а также смены пароля администратора.

<?php
// admin_dashboard.php

session_start();

require 'functions.php';

if (!isset($_SESSION['admin_logged_in']) || !$_SESSION['admin_logged_in']) {
    header("Location: index.php");
    exit;
}

$users = getAllUsers();
?>

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Панель администратора</title>
</head>
<body>
    <h2>Панель администратора</h2>
    <a href="logout.php">Выйти</a><br><br>

    <form method="post" action="add_user.php">
        Добавить пользователя:<br>
        Логин: <input type="text" name="username"><br>
        Пароль: <input type="password" name="password"><br><br>
        <button type="submit">Добавить</button>
    </form>

    <h3>Список пользователей:</h3>
    <ul>
        <?php foreach ($users as $user): ?>
            <li>
                <?php echo htmlspecialchars($user); ?>
                <a href="delete_user.php?username=<?php echo urlencode($user); ?>">Удалить</a>
                <form method="post" action="change_user_password.php" style="display:inline;">
                    Новый пароль: <input type="password" name="new_password">
                    <input type="hidden" name="username" value="<?php echo htmlspecialchars($user); ?>">
                    <button type="submit">Изменить пароль</button>
                </form>
            </li>
        <?php endforeach; ?>
    </ul>

    <form method="post" action="change_admin_password.php">
        Изменить пароль администратора:<br>
        Новый пароль: <input type="password" name="new_password"><br><br>
        <button type="submit">Изменить пароль</button>
    </form>
</body>
</html>
Файл logout.php
Этот файл будет обрабатывать выход администратора из системы.

<?php
// logout.php

session_start();
$_SESSION = [];
session_destroy();
header("Location: index.php");
exit;
?>
Файлы для добавления, удаления и изменения пользователей и пароля администратора
Теперь создадим необходимые обработчики для этих действий.

add_user.php
<?php
// add_user.php

session_start();

require 'functions.php';

if (!isset($_SESSION['admin_logged_in']) || !$_SESSION['admin_logged_in']) {
    header("Location: index.php");
    exit;
}

if (isset($_POST['username']) && isset($_POST['password'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];
    addUser($username, $password);
}

header("Location: admin_dashboard.php");
exit;
?>
delete_user.php
<?php
// delete_user.php

session_start();

require 'functions.php';

if (!isset($_SESSION['admin_logged_in']) || !$_SESSION['admin_logged_in']) {
    header("Location: index.php");
    exit;
}

if (isset($_GET['username'])) {
    $username = $_GET['username'];
    deleteUser($username);
}

header("Location: admin_dashboard.php");
exit;
?>
change_user_password.php
<?php
// change_user_password.php

session_start();

require 'functions.php';

if (!isset($_SESSION['admin_logged_in']) || !$_SESSION['admin_logged_in']) {
    header("Location: index.php");
    exit;
}

if (isset($_POST['username']) && isset($_POST['new_password'])) {
    $username = $_POST['username'];
    $newPassword = $_POST['new_password'];
    changeUserPassword($username, $newPassword);
}

header("Location: admin_dashboard.php");
exit;
?>
change_admin_password.php
<?php
// change_admin_password.php

session_start();

require 'functions.php';

if (!isset($_SESSION['admin_logged_in']) || !$_SESSION['admin_logged_in']) {
    header("Location: index.php");
    exit;
}

if (isset($_POST['new_password'])) {
    $newPassword = $_POST['new_password'];
    setAdminPassword($newPassword);
}

header("Location: admin_dashboard.php");
exit;
?>
Теперь у вас есть полноценная система управления пользователями с возможностью добавления, удаления и изменения пользователей, а также смены пароля администратора. Убедитесь, что файлы admin_password и passwd имеют соответствующие права доступа для записи и чтения.

Рекомендуется провести тестирование системы на реальном сервере перед её использованием в продакшн-среде.

